class:: RAVEDecoder
summary:: SuperCollider plugin for RAVE autoencoder
related:: Classes/RAVEPrior, Classes/RAVEEncoder, Classes/RAVE
categories:: UGens>Wrappers

description::
RAVE autoencoder plugin for SuperCollider. This class includes the RAVE decoder only. It takes a control-rate input for each latent dimension and produces audio.

note::
must use server hardwareBufferSize equal to the RAVE model (typically 2048) for good performance.
::

note::
must use server sampleRate equal to the RAVE model (typically 48000) for correct pitch.
::

note::
Synth creation will glitch the audio the first time a particular RAVE file is used, as the  model is loaded on the audio thread.
::

note::
code::
// if macOS complains about unknown binaries:
("xattr -d -r com.apple.quarantine"+Platform.userExtensionDir.quote++"/RAVE/").runInTerminal
::
::

method::new

argument::filename
String, path to torchscript file containing a RAVE model.

argument::input
Array of control-rate inputs, one for each latent dimension.

examples::

code::
(
// make sure the server can actually boot with the right sampleRate!
// Server.default.options.inDevice_("BlackHole 16ch");
// Server.default.options.outDevice_("BlackHole 16ch");
// Server.default.options.inDevice_("Built-in Microph");
// Server.default.options.outDevice_("Built-in Output");

s.options.sampleRate = 48000; // the sample rate must match RAVE
s.options.blockSize = 512;//16; // a low block size within scsynth is fine,
s.options.hardwareBufferSize = 2048; // but the hardware buffer size needs to match RAVE
// (to avoid dropouts)

s.waitForBoot{
	~bus = Bus.new(index:0, numChannels:2);
}
)

(
~synth = {
	var z = 8.collect{ |i| ("latent_"++i).asSymbol.kr};
	Limiter.ar(
        RAVEDecoder.new(
			"/Users/victor/rave-models/speech/speech_realtime.ts",
            z, // latent inputs
        )
    )!2;
}.play(outbus:~bus);

~set = { |key, fn| ~synth.set(key, Ndef(key, fn))};
)

// live-code the latent space
(
r = 48000/2048;
b = 0;
m = 0.1;
~set.(\latent_0, {SinOsc.kr(r/4)*2});
~set.(\latent_1, {SinOsc.kr(r/3)*2});
~set.(\latent_2, {SinOsc.kr(r/7)*2});
~set.(\latent_3, {SinOsc.kr(r/7)*2});
~set.(\latent_4, {SinOsc.kr(r/11)*2});
~set.(\latent_5, {SinOsc.kr(r/13)*2});
~set.(\latent_6, {SinOsc.kr(r/17)*2});
~set.(\latent_7, {SinOsc.kr(r/19)*2});
)
::