class:: RAVE
summary:: SuperCollider plugin for RAVE autoencoder
related:: Classes/RAVEPrior, Classes/RAVEEncoder, Classes/RAVEDecoder
categories:: UGens>Wrappers

description::
RAVE autoencoder plugin for SuperCollider. This class includes the RAVE encoder, decoder and prior models. For more fine-grained control, see the separate RAVEEncoder, RAVEDecoder and RAVEPrior UGens.

note::
must use server hardwareBufferSize equal to the RAVE model (typically 2048) for good performance.
::

note::
must use server sampleRate equal to the RAVE model (typically 48000) for correct pitch.
::

note::
Synth creation will glitch the audio the first time a particular RAVE file is used, as the  model is loaded on the audio thread.
::

note::
code::
// if macOS complains about unknown binaries:
("xattr -d -r com.apple.quarantine"+Platform.userExtensionDir.quote++"/RAVE/").runInTerminal
::
::

method::new

argument::filename
String, path to torchscript file containing a RAVE model.

argument::input
audio input for encoder-decoder mode; ignored when prior>0.

argument::prior
control signal. if greater than zero, sample from prior instead of transforming input.

argument::temperature
control signal, temperature (typically 0-1) when sampling prior; ignored when prior=0.

examples::

code::
(
// make sure the server can actually boot with the right sampleRate!
// Server.default.options.inDevice_("BlackHole 16ch");
// Server.default.options.outDevice_("BlackHole 16ch");
// Server.default.options.inDevice_("Built-in Microph");
// Server.default.options.outDevice_("Built-in Output");

s.options.sampleRate = 48000; // the sample rate must match RAVE
s.options.blockSize = 512;//16; // a low block size within scsynth is fine,
s.options.hardwareBufferSize = 2048; // but the hardware buffer size needs to match RAVE
// (to avoid dropouts)

s.waitForBoot{
	~bus = Bus.new(index:0, numChannels:2);
}
)

(
~synth = {
    var out = Limiter.ar(
        RAVE.new(
			"/Users/victor/rave-models/speech/speech_realtime.ts",
            SoundIn.ar(0),// input for timbre transfer
            \prior.kr(0), // 0 for timbre transfer, 1 for generation
            \temp.kr(1) // temperature of generation
        )
    );
    out!2;

}.play(outbus:~bus);

)
~synth.set(\prior, 1); // use prior instead of encoder
~synth.set(\temp, 0); // then set the prior temperature

)
::